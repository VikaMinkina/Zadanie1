def count_simple_cycles(graph):
    def dfs(vertex, path):
        visited[vertex] = True
        path.append(vertex)
        for neighbor in graph[vertex]:
            if neighbor not in visited:
                dfs(neighbor, path)
            elif neighbor == path[0]: # Найден цикл
                cycles.append(path[path.index(neighbor):])
        path.pop()
        visited.pop(vertex)

    visited = {}
    cycles = []
    for vertex in graph:
        if vertex not in visited:
            dfs(vertex, [])
    return cycles

# Функция для ввода графа с клавиатуры
def input_graph():
    graph = {}
    n = int(input("Введите количество вершин: "))
    for i in range(n):
        vertex = input(f"Введите вершину {i+1}: ")
        neighbors = input(f"Введите список смежных вершин через пробел для вершины {vertex}: ").split()
        graph[vertex] = neighbors
    return graph

# Ввод графа с клавиатуры
graph = input_graph()

# Определение количества простых циклов в графе
simple_cycles = count_simple_cycles(graph)
print(f"Количество простых циклов в графе: {len(simple_cycles)}")
