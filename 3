def has_cycle(graph):
    visited = set()

    def dfs(vertex, parent):
        visited.add(vertex)
        for neighbor in graph[vertex]:
            if neighbor not in visited:
                if dfs(neighbor, vertex):
                    return True
            elif neighbor != parent:
                return True
        return False

    for vertex in graph:
        if vertex not in visited:
            if dfs(vertex, None):
                return True
    return False

# Функция для ввода графа с клавиатуры
def input_graph():
    graph = {}
    n = int(input("Введите количество вершин: "))
    for i in range(n):
        vertex = input(f"Введите вершину {i+1}: ")
        neighbors = input(f"Введите список смежных вершин через пробел для вершины {vertex}: ").split()
        graph[vertex] = neighbors
    return graph

# Ввод графа с клавиатуры
graph = input_graph()

# Проверка наличия цикла в графе
if has_cycle(graph):
    print("Граф содержит цикл.")
else:
    print("Граф не содержит цикла.")
